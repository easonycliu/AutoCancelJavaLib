/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.lang.management.ManagementFactory;
import java.lang.management.OperatingSystemMXBean;
import java.util.regex.Matcher;

import autocancel.app.elasticsearch.AutoCancel;
import autocancel.utils.Syscall;

public class App {

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        AutoCancel.start(null);

        System.out.println("CPU core number: " + Runtime.getRuntime().availableProcessors());

        OperatingSystemMXBean osmxb = ManagementFactory.getOperatingSystemMXBean();
        System.out.println(osmxb.getSystemLoadAverage());

        // System.out.println(Syscall.gettid());

        System.out.println(new App().getGreeting());
        Object t = new Object() {
            @Override
            public String toString() {
                return "Task{id=1180, type='transport', action='indices:data/read/search', description='null', parentTask=unset, startTime=1691498694671, startTimeNanos=1118293583160794}";
            }
        };
        System.out.println(t.toString().matches("(.*)(startTime=)([^\\s]+)(,)(.*)"));
        AutoCancel.onTaskCreate(t, false);
        Runnable r = new Runnable() {
            @Override
            public void run() {
                for (Integer i = 0; i < 10; ++i) {
                    System.out.println(i);
                }
            }
        };
        AutoCancel.onTaskQueueInThread(r);
        Thread thread1 = new Thread() {
            @Override
            public void run() {
                AutoCancel.onTaskStartInThread(r);
                System.out.println(String.format("Thread name : %s", Thread.currentThread().getName()));
                try {
                    Thread.sleep(100);
                }
                catch (Exception e) {

                }
                AutoCancel.onTaskFinishInThread();
            }
        };
        thread1.start();
        
        try {
            thread1.join();
        }
        catch (Exception e) {

        }
        AutoCancel.onTaskExit(t);
        AutoCancel.onTaskFinishInThread();
        System.out.println("Finish 0");

        Object t1 = new Object() {
            @Override
            public String toString() {
                return "Task{id=1181, type='direct', action='indices:data/read/search[phase/query]', description='shardId[[news][0]]', parentTask=unset, startTime=1691498694680, startTimeNanos=1118293592124051}";
            }
        };
        Runnable r1 = new Runnable() {
            @Override
            public void run() {
                for (Integer i = 0; i < 11; ++i) {
                    System.out.println(i);
                }
            }
        };
        AutoCancel.onTaskQueueInThread(r1);
        AutoCancel.onTaskStartInThread(r1);
        AutoCancel.onTaskCreate(t1, false);
        AutoCancel.onTaskExit(t1);
        AutoCancel.onTaskFinishInThread();
        try {
            Thread.sleep(10000);
        }
        catch (Exception e) {

        }
        AutoCancel.stop();
        System.out.println("Finish 1");
        

        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();

        Long currentThreadStart = threadMXBean.getCurrentThreadCpuTime();
        Long start = System.nanoTime();
        Long sum = 0L;
        for (Integer i = 0; i < 1000000; ++i) {
            sum += i;
        }
        Long currentThreadTotal = threadMXBean.getCurrentThreadCpuTime() - currentThreadStart;
        Long total = System.nanoTime() - start;
        System.out.println(String.format("Current thread: %d, Total: %d", currentThreadTotal, total));
    }
}
